{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq3{\*\panose 020b0604030504040204}Tahoma;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}{\f28\fmodern\fcharset238\fprq1 Courier New CE;}{\f29\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f31\fmodern\fcharset161\fprq1 Courier New Greek;}{\f32\fmodern\fcharset162\fprq1 Courier New Tur;}{\f33\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \sbasedon0 \snext16 Definition Term;}{\s16\li360\widctlpar\adjustright \sbasedon0 \snext15 
Definition List;}{\*\cs17 \additive \i Definition;}{\s18\sb100\sa100\keepn\widctlpar\outlinelevel1\adjustright \b\fs48\kerning36 \sbasedon0 \snext0 H1;}{\s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 \sbasedon0 \snext0 H2;}{
\s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 \sbasedon0 \snext0 H3;}{\s21\sb100\sa100\keepn\widctlpar\outlinelevel4\adjustright \b \sbasedon0 \snext0 H4;}{\s22\sb100\sa100\keepn\widctlpar\outlinelevel5\adjustright \b\fs20 
\sbasedon0 \snext0 H5;}{\s23\sb100\sa100\keepn\widctlpar\outlinelevel6\adjustright \b\fs16 \sbasedon0 \snext0 H6;}{\s24\widctlpar\adjustright \i \sbasedon0 \snext0 Address;}{\s25\li360\ri360\sb100\sa100\widctlpar\adjustright \sbasedon0 \snext25 
Blockquote;}{\*\cs26 \additive \i CITE;}{\*\cs27 \additive \f2\fs20 CODE;}{\*\cs28 \additive \i \sbasedon10 Emphasis;}{\*\cs29 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\*\cs30 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs31 \additive 
\b\f2\fs20 Keyboard;}{\s32\widctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\tx9590\adjustright \f2\fs20 \sbasedon0 \snext32 Preformatted;}{\s33\qc\widctlpar\brdrt\brdrdb\brdrw5\brdrcf1 \adjustright \v\f1\fs16 \snext0 \shidden 
z-Bottom of Form;}{\s34\qc\widctlpar\brdrb\brdrdb\brdrw5\brdrcf1 \adjustright \v\f1\fs16 \snext0 \shidden z-Top of Form;}{\*\cs35 \additive \f2 Sample;}{\*\cs36 \additive \b \sbasedon10 Strong;}{\*\cs37 \additive \f2\fs20 Typewriter;}{\*\cs38 \additive 
\i Variable;}{\*\cs39 \additive \v\cf6 HTML Markup;}{\*\cs40 \additive \v Comment;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}
{\listname ;}\listid-2}{\list\listtemplateid0{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160 }{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}\fi-360\li3600 }{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\fi-360\li4320 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'06.;}{\levelnumbers\'01;}
\fi-360\li5040 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers\'01;}\fi-360\li5760 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'00;}{\levelnumbers;}}{\listname ;}\listid2}{\list\listtemplateid0{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720 }{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'01.;}{\levelnumbers\'01;}\fi-360\li1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'02.;}{\levelnumbers\'01;}\fi-360\li2160 }{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'03.;}{\levelnumbers\'01;}\fi-360\li2880 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'04.;}{\levelnumbers\'01;}
\fi-360\li3600 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'05.;}{\levelnumbers\'01;}\fi-360\li4320 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'02\'06.;}{\levelnumbers\'01;}\fi-360\li5040 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'07.;}{\levelnumbers\'01;}\fi-360\li5760 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0
\levelspace0\levelindent0{\leveltext\'00;}{\levelnumbers;}}{\listname ;}\listid3}}{\*\listoverridetable{\listoverride\listid2\listoverridecount8{\lfolevel\listoverridestartat\listoverrideformat{\listlevel\levelnfc1\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}}}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}
{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}\ls1}{\listoverride\listid3\listoverridecount8{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel
\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}{\lfolevel\listoverridestartat
\levelstartat1}{\lfolevel\listoverridestartat\levelstartat1}\ls2}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720 }}\ls3}}{\*\revtbl {Unknown;}}{\info{\author Doug Gaede}{\operator Doug Gaede}{\creatim\yr2000\mo11\dy28\hr8\min49}{\revtim\yr2000\mo11\dy28\hr8\min50}{\version2}{\edmins1}{\nofpages16}{\nofwords7640}{\nofchars43549}
{\*\company SSA}{\nofcharsws53481}{\vern113}}\margl1440\margr1440 \widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \linex0\headery1440\footery1440\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s18\sb100\sa100\keepn\widctlpar\outlinelevel1\adjustright \b\fs48\kerning36 {zlib 1.1.3 Manual 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz0\shplid1026
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8192\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Contents
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 I.\tab}}\pard\plain \fi-360\li720\widctlpar\jclisttab\tx720\ls1\outlinelevel0\adjustright \fs20\cgrid {\field{\*\fldinst {HYPERLINK  \\l "Prologue"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000009000000500072006f006c006f006700750065000000}}}{\fldrslt {\cs29\ul\cf2 Prologue}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 II.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Introduction"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000049006e00740072006f00640075006300740069006f006e000000}}
}{\fldrslt {\cs29\ul\cf2 Introduction}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 III.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Utility functions"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000120000005500740069006c006900740079002000660075006e006300740069006f006e0073000000}}}{\fldrslt {\cs29\ul\cf2 Utility functions}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 IV.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Basic functions"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000010000000420061007300690063002000660075006e006300740069006f006e0073000000}}}{\fldrslt {\cs29\ul\cf2 Basic functions}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 V.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Advanced functions"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001300000041006400760061006e006300650064002000660075006e006300740069006f006e0073000000}}}{\fldrslt {\cs29\ul\cf2 Advanced functions}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 VI.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Constants"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000043006f006e007300740061006e00740073000000}}}{\fldrslt {
\cs29\ul\cf2 Constants}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 VII.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "struct z_stream_s"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001200000073007400720075006300740020007a005f00730074007200650061006d005f0073000000}}}{\fldrslt {\cs29\ul\cf2 struct z_stream_s}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 VIII.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Checksum functions"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001300000043006800650063006b00730075006d002000660075006e006300740069006f006e0073000000}}}{\fldrslt {\cs29\ul\cf2 Checksum functions}}}{ 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 IX.\tab}}{\field{\*\fldinst {HYPERLINK  \\l "Misc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000004d006900730063000000}}}{\fldrslt {\cs29\ul\cf2 Misc}}}{ 
\par }\pard \widctlpar\adjustright {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz1\shplid1027{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8193
\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Prologue 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {'zlib' general purpose compression library version 1.1.3, July 9th, 1998 
\par Copyright (C) 1995-1998 Jean-loup Gailly and Mark Adler 
\par This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software. 
\par Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions: 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-360\li720\widctlpar\jclisttab\tx720\ls2\outlinelevel0\adjustright {
The origin of this software must not be misrepresented ; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required. 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software. 
\par {\listtext\pard\plain\fs20\cgrid \hich\af0\dbch\af0\loch\f0 3.\tab}This notice may not be removed or altered from any source distribution. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {Jean-loup Gailly 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {\field{\*\fldinst {HYPERLINK "mailto:jloup@gzip.org"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b2c0000006d00610069006c0074006f003a006a006c006f0075007000400067007a00690070002e006f00720067000000}}}{\fldrslt {\cs29\ul\cf2 jloup@gzip.org}}}{ 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {Mark Adler 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {\field{\*\fldinst {HYPERLINK "mailto:madler@alumni.caltech.edu"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b420000006d00610069006c0074006f003a006d00610064006c0065007200400061006c0075006d006e0069002e00630061006c0074006500630068002e006500640075000000}}}{\fldrslt {\cs29\ul\cf2 
madler@alumni.caltech.edu}}}{ 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {The data format used by the zlib library is described by RFCs (Request for Comments) 1950 to 1952 in the files }{\field{\*\fldinst {HYPERLINK "ftp://ds.internic.net/rfc/rfc1950.txt"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4c0000006600740070003a002f002f00640073002e0069006e007400650072006e00690063002e006e00650074002f007200660063002f0072006600630031003900350030002e007400780074000000}}}{\fldrslt 
{\cs29\ul\cf2 ftp://ds.internic.net/rfc/rfc1950.txt }}}{(zlib format), }{\field{\*\fldinst {HYPERLINK "ftp://ds.internic.net/rfc/rfc1951.txt"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4c0000006600740070003a002f002f00640073002e0069006e007400650072006e00690063002e006e00650074002f007200660063002f0072006600630031003900350031002e007400780074000000}}}{\fldrslt 
{\cs29\ul\cf2 rfc1951.txt }}}{(}{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ format) and }{\field{\*\fldinst {
HYPERLINK "ftp://ds.internic.net/rfc/rfc1952.txt"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b4c0000006600740070003a002f002f00640073002e0069006e007400650072006e00690063002e006e00650074002f007200660063002f0072006600630031003900350032002e007400780074000000}}}{\fldrslt 
{\cs29\ul\cf2 rfc1952.txt }}}{(gzip format). 
\par This manual is converted from zlib.h by }{\field{\*\fldinst {HYPERLINK "mailto:piaip@csie.ntu.edu.tw"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b3a0000006d00610069006c0074006f003a0070006900610069007000400063007300690065002e006e00740075002e006500640075002e00740077000000}}}{\fldrslt {\cs29\ul\cf2 piaip }}}{
\par Visit }{\field{\*\fldinst {HYPERLINK "http://www.info-zip.org/pub/infozip/zlib/"}{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b0200000003000000e0c9ea79f9bace118c8200aa004ba90b5400000068007400740070003a002f002f007700770077002e0069006e0066006f002d007a00690070002e006f00720067002f007000750062002f0069006e0066006f007a00690070002f007a006c00690062002f00
0000}}}{\fldrslt {\cs29\ul\cf2 http://www.info-zip.org/pub/infozip/zlib/}}}{ for the official zlib web page. 
\par }{\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz2\shplid1028{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8194
\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Introduction 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {The 'zlib' compression library provides in-memory c
ompression and decompression functions, including integrity checks of the uncompressed data. This version of the library supports only one compression method (deflation) but other algorithms will be added later and will have the same stream interface. 

\par Com
pression can be done in a single step if the buffers are large enough (for example if an input file is mmap'ed), or can be done by repeated calls of the compression function. In the latter case, the application must provide more input and/or consume the o
utput (providing more output space) before each call. 
\par The library also supports reading and writing files in gzip (.gz) format with an interface similar to that of stdio. 
\par The library does not install any signal handler. The decoder checks the consistency of the compressed data, so the library should never crash even in case of corrupted input. 
\par }{\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz3\shplid1029{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8195
\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Utility functions 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {The following utility functions are implemented on top of the }{\field{\*\fldinst {HYPERLINK  \\l "Basic functions"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000010000000420061007300690063002000660075006e006300740069006f006e0073000000}}}{\fldrslt {\cs29\ul\cf2 basic stream-oriented functions}}}{
. To simplify the interface, some default options are assumed (compression level and memory usage, standard memory allocation functions). The source code of these utility functions can easily be modified if you need special options. 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function list 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \fi-360\li720\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright \fs20\cgrid {int }{\field{\*\fldinst {HYPERLINK  \\
l "compress"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000063006f006d00700072006500730073000000}}}{\fldrslt {\cs29\ul\cf2 compress}}}{ (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "compress2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000063006f006d007000720065007300730032000000}}}{\fldrslt {
\cs29\ul\cf2 compress2}}}{ (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "uncompress"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000075006e0063006f006d00700072006500730073000000}}}{\fldrslt {
\cs29\ul\cf2 uncompress}}}{ (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}typedef voidp gzFile; 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}gzFile }{\field{\*\fldinst {HYPERLINK  \\l "gzopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 
gzopen}}}{ (const char *path, const char *mode); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}gzFile }{\field{\*\fldinst {HYPERLINK  \\l "gzdopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0064006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 
gzdopen}}}{ (int fd, const char *mode); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzsetparams"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000067007a0073006500740070006100720061006d0073000000}}
}{\fldrslt {\cs29\ul\cf2 gzsetparams}}}{ (gzFile file, int level, int strategy); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}}{\fldrslt {\cs29\ul\cf2 gzread}
}}{ (gzFile file, voidp buf, unsigned len); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzwrite"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a00770072006900740065000000}}}{\fldrslt {\cs29\ul\cf2 
gzwrite}}}{ (gzFile file, const voidp buf, unsigned len); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int VA }{\field{\*\fldinst {HYPERLINK  \\l "gzprintf"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000067007a007000720069006e00740066000000}}}{\fldrslt {
\cs29\ul\cf2 gzprintf}}}{ (gzFile file, const char *format, ...); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzputs"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0070007500740073000000}}}{\fldrslt {\cs29\ul\cf2 gzputs}
}}{ (gzFile file, const char *s); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}char * }{\field{\*\fldinst {HYPERLINK  \\l "gzgets"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0067006500740073000000}}}{\fldrslt {\cs29\ul\cf2 
gzgets}}}{ (gzFile file, char *buf, int len); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzputc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0070007500740063000000}}}{\fldrslt {\cs29\ul\cf2 gzputc}
}}{ (gzFile file, int c); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzgetc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0067006500740063000000}}}{\fldrslt {\cs29\ul\cf2 gzgetc}
}}{ (gzFile file); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzflush"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0066006c007500730068000000}}}{\fldrslt {\cs29\ul\cf2 
gzflush}}}{ (gzFile file, int flush); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}z_off_t }{\field{\*\fldinst {HYPERLINK  \\l "gzseek"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a007300650065006b000000}}}{\fldrslt {\cs29\ul\cf2 
gzseek}}}{ (gzFile file, z_off_t offset, int whence); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}z_off_t }{\field{\*\fldinst {HYPERLINK  \\l "gztell"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a00740065006c006c000000}}}{\fldrslt {\cs29\ul\cf2 
gztell}}}{ (gzFile file); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzrewind"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000067007a0072006500770069006e0064000000}}}{\fldrslt {
\cs29\ul\cf2 gzrewind}}}{ (gzFile file); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzeof"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000600000067007a0065006f0066000000}}}{\fldrslt {\cs29\ul\cf2 gzeof}}}{
 (gzFile file); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "gzclose"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0063006c006f00730065000000}}}{\fldrslt {\cs29\ul\cf2 
gzclose}}}{ (gzFile file); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}const char * }{\field{\*\fldinst {HYPERLINK  \\l "gzerror"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a006500720072006f0072000000}}}{\fldrslt {
\cs29\ul\cf2 gzerror}}}{ (gzFile file, int *errnum); 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function description 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int compress (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Compresses the source buff
er into the destination buffer. sourceLen is the byte length of the source buffer. Upon entry, destLen is the total size of the destination buffer, which must be at least 0.1% larger than sourceLen plus 12 bytes. Upon exit, destLen is the actual size of t
he compressed buffer. 
\par This function can be used to }{\field{\*\fldinst {HYPERLINK  \\l "compress"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000063006f006d00700072006500730073000000}}}{\fldrslt {\cs29\ul\cf2 compress}}}{
 a whole file at once if the input file is mmap'ed. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "compress"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000063006f006d00700072006500730073000000}}}{\fldrslt {\cs29\ul\cf2 compress}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if there was not enough room in the output buffer. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int compress2 (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Compresses the source buffer into the destination buffer. The level parameter has the same meaning as in }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{. sourceLen is the byte length of the source buffer. Upon
 entry, destLen is the total size of the destination buffer, which must be at least 0.1% larger than sourceLen plus 12 bytes. Upon exit, destLen is the actual size of the compressed buffer. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "compress2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000063006f006d007000720065007300730032000000}}}{\fldrslt {\cs29\ul\cf2 compress2}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if there was not enough room in the output buffer, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the level parameter is invalid. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int uncompress (Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Decompresses the source buffer into the destination buffer. sourceLen is the byte length 
of the source buffer. Upon entry, destLen is the total size of the destination buffer, which must be large enough to hold the entire uncompressed data. (The size of the uncompressed data must have been saved previously by the compressor and transmitted to
 the decompressor by some mechanism outside the scope of this compression library.) Upon exit, destLen is the actual size of the compressed buffer. 
\par This function can be used to decompress a whole file at once if the input file is mmap'ed. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "uncompress"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000075006e0063006f006d00700072006500730073000000}}}{\fldrslt {\cs29\ul\cf2 uncompress}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\
l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if there was not enough room in the output buffer, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_DATA_ERROR"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{ if the input data was corrupted. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {typedef voidp gzFile; 
\par }{\cf2 gzFile gzopen (const char *path, const char *mode);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Opens a gzip (.gz) file for reading or writing. The mode pa
rameter is as in fopen ("rb" or "wb") but can also include a compression level ("wb9") or a strategy: 'f' for filtered data as in "wb6f", 'h' for Huffman only compression as in "wb1h". (See the description of }{\field{\*\fldinst {HYPERLINK  \\
l "deflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ for more information about the strategy parameter.) 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzopen}}}{ can be used to read a file which is not in gzip format ; in this case }
{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}}{\fldrslt {\cs29\ul\cf2 gzread}}}{ will directly read from the file without decompression. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzopen}}}{
 returns NULL if the file could not be opened or if there was insufficient memory to allocate the (de)compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000
}}}{\fldrslt {\cs29\ul\cf2 state}}}{ ; errno can be checked to distinguish the two cases (if errno is zero, the zlib error is }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 gzFile gzdopen (int fd, const char *mode);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {\field{\*\fldinst {HYPERLINK  \\l "gzdopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0064006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzdopen}}}{
() associates a gzFile with the file descriptor fd. File descriptors are obtained from calls like open, dup, creat, pipe or fileno (in the file has been previously opened with fopen). The mode parameter is as in }{\field{\*\fldinst {HYPERLINK  \\
l "gzopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzopen}}}{. 
\par The next call of }{\field{\*\fldinst {HYPERLINK  \\l "gzclose"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0063006c006f00730065000000}}}{\fldrslt {\cs29\ul\cf2 gzclose}}}{
 on the returned gzFile will also close the file descriptor fd, just like fclose(fdopen(fd), mode) closes the file descriptor fd. If you want to keep fd open, use }{\field{\*\fldinst {HYPERLINK  \\l "gzdopen"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0064006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzdopen}}}{(dup(fd), mode). 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzdopen"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0064006f00700065006e000000}}}{\fldrslt {\cs29\ul\cf2 gzdopen}}}{
 returns NULL if there was insufficient memory to allocate the (de)compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}
{. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzsetparams (gzFile file, int level, int strategy);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Dynamically update the compression level or strategy. See the description of }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ for the meaning of these parameters. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzsetparams"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000067007a0073006500740070006100720061006d0073000000}}}{\fldrslt {\cs29\ul\cf2 gzsetparams}}}{ returns }{\field{\*\fldinst {HYPERLINK  
\\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the file was not opened for writing. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzread (gzFile file, voidp buf, unsigned len);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Reads the given number of uncompressed bytes from the compressed file. If the input file was not in gzip format, }{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}}{\fldrslt {\cs29\ul\cf2 gzread}}}{ copies the given number of bytes into the buffer. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}}{\fldrslt {\cs29\ul\cf2 gzread}}}{ returns the number of uncompressed bytes actually read (0 for end of fi
le, -1 for error). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzwrite (gzFile file, const voidp buf, unsigned len);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Writes the given number of uncompressed bytes into the compressed file. }{\field{\*\fldinst {HYPERLINK  \\l "gzwrite"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a00770072006900740065000000}}}{\fldrslt {\cs29\ul\cf2 gzwrite}}}{ returns the number of uncompressed bytes actually written (0 in case of error). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int VA gzprintf (gzFile file, const char *format, ...);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Converts, formats, and writes the args to the compressed file under control of the format string, as in fprintf. }{\field{\*\fldinst {HYPERLINK  \\l "gzprintf"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000067007a007000720069006e00740066000000}}}{\fldrslt {\cs29\ul\cf2 gzprintf}}}{ returns the number of uncompressed bytes actually written (0 in case of error). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzputs (gzFile file, const char *s);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Writes the given null-terminated string to the compressed file, excluding the terminating null character. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzputs"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0070007500740073000000}}}{\fldrslt {\cs29\ul\cf2 gzputs}}}{ returns the number of characters written, or -1 in case of error. 

\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 char * gzgets (gzFile file, char *buf, int len);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Reads bytes from the compressed file until len-1 characters are read, or a newline cha
racter is read and transferred to buf, or an end-of-file condition is encountered. The string is then terminated with a null character. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzgets"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0067006500740073000000}}}{\fldrslt {\cs29\ul\cf2 gzgets}}}{ returns buf, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{ in case of error. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzputc (gzFile file, int c);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Writes c, converted to an unsigned char, into the compressed file. }{\field{\*\fldinst {HYPERLINK  \\l "gzputc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0070007500740063000000}}}{\fldrslt {\cs29\ul\cf2 gzputc}}}{ returns the value that was written, or -1 in case of error. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzgetc (gzFile file);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Reads one byte from the compressed file. }{\field{\*\fldinst {HYPERLINK  \\l "gzgetc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0067006500740063000000}}
}{\fldrslt {\cs29\ul\cf2 gzgetc}}}{ returns this byte or -1 in case of end of file or error. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzflush (gzFile file, int flush);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Flushes all pending output into the compressed file. The parameter flush is as in the }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{() function. The return value is the zlib error number (see function }{\field{\*\fldinst {HYPERLINK  \\l "gzerror"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a006500720072006f0072000000}}}{\fldrslt {\cs29\ul\cf2 gzerror}}}{ below). }{\field{\*\fldinst {HYPERLINK  \\l "gzflush"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0066006c007500730068000000}}}{\fldrslt {\cs29\ul\cf2 gzflush}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if the flush parameter is }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{ and all output could be flushed. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzflush"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a0066006c007500730068000000}}}{\fldrslt {\cs29\ul\cf2 gzflush}}}{
 should be called only when strictly necessary because it can degrade compression. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 z_off_t gzseek (gzFile file, z_off_t offset, int whence);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Sets the starting position for the next }{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}
}{\fldrslt {\cs29\ul\cf2 gzread}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "gzwrite"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a00770072006900740065000000}}}{\fldrslt {\cs29\ul\cf2 gzwrite}}}{ 
on the given compressed file. The offset represents a number of bytes in the uncompressed data stream. The whence parameter is defined as in lseek(2); the value SEEK_END is not supported. 
\par If the file is opened for reading, this function is emulated but can be extremely slow. If the file is opened for writing, only forward seeks are supported ; }{\field{\*\fldinst {HYPERLINK  \\l "gzseek"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a007300650065006b000000}}}{\fldrslt {\cs29\ul\cf2 gzseek}}}{ then compresses a sequence of zeroes up to the new starting position. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzseek"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a007300650065006b000000}}}{\fldrslt {\cs29\ul\cf2 gzseek}}}{ returns the 
resulting offset location as measured in bytes from the beginning of the uncompressed stream, or -1 in case of error, in particular if the file is opened for writing and the new starting position would be before the current position. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzrewind (gzFile file);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Rewinds the given file. This function is supported only for reading. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gzrewind"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000067007a0072006500770069006e0064000000}}}{\fldrslt {\cs29\ul\cf2 gzrewind}}}{(file) is equivalent to (int)}{\field{\*\fldinst {HYPERLINK
  \\l "gzseek"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a007300650065006b000000}}}{\fldrslt {\cs29\ul\cf2 gzseek}}}{(file, 0L, SEEK_SET) 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 z_off_t gztell (gzFile file);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Returns the starting position for the next }{\field{\*\fldinst {HYPERLINK  \\l "gzread"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a0072006500610064000000}}
}{\fldrslt {\cs29\ul\cf2 gzread}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "gzwrite"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a00770072006900740065000000}}}{\fldrslt {\cs29\ul\cf2 gzwrite}}}{
 on the given compressed file. This position represents a number of bytes in the uncompressed data stream. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "gztell"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a00740065006c006c000000}}}{\fldrslt {\cs29\ul\cf2 gztell}}}{(file) is equivalent to }{\field{\*\fldinst {HYPERLINK  \\l "gzseek"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000700000067007a007300650065006b000000}}}{\fldrslt {\cs29\ul\cf2 gzseek}}}{(file, 0L, SEEK_CUR) 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzeof (gzFile file);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Returns 1 when EOF has previously been detected reading the given input stream, otherwise zero. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int gzclose (gzFile file);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Flushes all pending output if necessary, closes the compressed file and deallocates all the (de)compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{. The return value is the zlib error number (see function }{\field{\*\fldinst {HYPERLINK  \\l "gzerror"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000067007a006500720072006f0072000000}}}{\fldrslt {\cs29\ul\cf2 gzerror}}}{ below). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 const char * gzerror (gzFile file, int *errnum);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Returns the error message for the last error which occurred on the given compressed file. errnum is set to zlib error number. If an error occurred in 
the file system and not in the compression library, errnum is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_ERRNO"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000005a005f004500520052004e004f000000}}}{\fldrslt {\cs29\ul\cf2 Z_ERRNO}
}}{ and the application may consult errno to get the exact error code. 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz4\shplid1030
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8196\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Basic functions 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function list 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \fi-360\li720\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright \fs20\cgrid {const char * }{\field{\*\fldinst {HYPERLINK  
\\l "zlibVersion"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000007a006c0069006200560065007200730069006f006e000000}}}{\fldrslt {\cs29\ul\cf2 zlibVersion}}}{ (void); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}
}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{
 strm, int level); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
deflate}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm, int flush); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateEnd"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000006400650066006c0061007400650045006e0064000000}}}{\fldrslt {
\cs29\ul\cf2 deflateEnd}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}
}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 

\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
inflate}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm, int flush); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateEnd"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000069006e0066006c0061007400650045006e0064000000}}}{\fldrslt {
\cs29\ul\cf2 inflateEnd}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function description 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 const char * zlibVersion (void);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {The application can compare }{\field{\*\fldinst {HYPERLINK  \\l "zlibVersion"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000007a006c0069006200560065007200730069006f006e000000}}}{\fldrslt {\cs29\ul\cf2 zlibVersion}}}{ and ZLIB_VERSION for consistency. If the first character differs, th
e library code actually used is not compatible with the zlib.h header file used by the application. This check is automatically made by }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateInit (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int level);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Initializes the internal stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {
\cs29\ul\cf2 state}}}{ for compression. The fields }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{, }
{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ must be initialized before by the caller. If }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ are set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ updates them to use default allocation functions. 
\par The compression level must be }{\field{\*\fldinst {HYPERLINK  \\l "Z_DEFAULT_COMPRESSION"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000160000005a005f00440045004600410055004c0054005f0043004f004d005000520045005300530049004f004e000000}}
}{\fldrslt {\cs29\ul\cf2 Z_DEFAULT_COMPRESSION}}}{, or between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all (the input data is simply copied a block at a time). 
\par }{\field{\*\fldinst {HYPERLINK  \\l "Z_DEFAULT_COMPRESSION"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000160000005a005f00440045004600410055004c0054005f0043004f004d005000520045005300530049004f004e000000}}}{\fldrslt {\cs29\ul\cf2 
Z_DEFAULT_COMPRESSION}}}{ requests a default compromise between speed and compression (currently equivalent to level 6). 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ returns }{\field{\*\fldinst {HYPERLINK  
\\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if level is not a valid compression level, }{\field{\*\fldinst {HYPERLINK  \\
l "Z_VERSION_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000100000005a005f00560045005200530049004f004e005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_VERSION_ERROR}}}{ if the zlib library version (}{\field{\*\fldinst {
HYPERLINK  \\l "zlib_version"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000007a006c00690062005f00760065007200730069006f006e000000}}}{\fldrslt {\cs29\ul\cf2 zlib_version}}}{
) is incompatible with the version assumed by the caller (ZLIB_VERSION). }{\field{\*\fldinst {HYPERLINK  \\l "msg"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{
 is set to null if there is no error message. }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit
}}}{ does not perform any compression: this will be done by }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). 

\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflate (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt 
{\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int flush);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{
 compresses as much data as possible, and stops when the input buffer becomes empty or the output buffer becomes full. It may introduce some output latency (reading input without producing any output) except when forced to flush. 
\par The detailed semantics are as follows. }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{
 performs one or both of the following actions: 
\par {\pntext\pard\plain\s16 \f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s16\fi-360\li1080\sb100\sa100\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Compress more input starting at }{\field{\*\fldinst {
HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and update }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ accordingly. If not all input can be processed (because there is not enough room in the output buffer), }
{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ are updated and processing will resume at this point for the next call of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). 
\par {\pntext\pard\plain\s16 \f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Provide more output starting at }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}
}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and update }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and }
{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{
 accordingly. This action is forced if the parameter flush is non zero. Forcing flush freque
ntly degrades the compression ratio, so this parameter should be set only when necessary (in interactive applications). Some output may be provided even if flush is not set. 
\par }\pard \s16\li360\sb100\sa100\widctlpar\adjustright {Before the call of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
deflate}}}{(), the application should ensure that at least one of the actions is possible, by providing more input and/or consuming more output, and updating }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ accordingly ; }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{
 should never be zero before the call. The application can consume the compressed output when it wants, for example when the output buffer is full (}{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ == 0), or after each call of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). If }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ and with zero }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{, it must be called again after making room in the output buffer because there might be more output pending. 
\par If the parameter flush is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_SYNC_FLUSH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530059004e0043005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_SYNC_FLUSH}}}{
, all pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far. (In particular }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{
 is zero after the call if enough output space has been provided before the call.) Flushing may degrade compression for some compression algorithms and so it should be used only when necessary. 
\par If flush is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_FULL_FLUSH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00460055004c004c005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FULL_FLUSH}}}{
, all output is flushed as with }{\field{\*\fldinst {HYPERLINK  \\l "Z_SYNC_FLUSH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530059004e0043005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_SYNC_FLUSH}}}{
, and the compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{
 is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using }{\field{\*\fldinst {HYPERLINK  \\l "Z_FULL_FLUSH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00460055004c004c005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FULL_FLUSH}}}{ too often can seriously degrade the compression. 
\par If }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ returns with }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{
 == 0, this function must be called again with the same value of the flush parameter and more output space (updated }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{), until the flush is complete (}{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ returns with non-zero }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{). 
\par If the parameter flush is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{
, pending input is processed, pending output is flushed and }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{
 returns with }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_END"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{
 if there was enough output space ; if }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ returns with }
{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{, this function must be called again with }{\field{\*\fldinst {HYPERLINK  \\
l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{ and more output space (updated }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{) but no more input data, until it returns with }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_END"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{ or an error. After }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ has returned }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_END"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{, the only possible operations on the stream are }{\field{\*\fldinst {HYPERLINK  \\l "deflateReset"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c00610074006500520065007300650074000000}}}{\fldrslt {\cs29\ul\cf2 deflateReset}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "deflateEnd"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000006400650066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 deflateEnd}}}{. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{ can be used immediately after }{\field{\*\fldinst {
HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{
 if all the compression is to be done in a single step. In this case, }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {
\cs29\ul\cf2 avail_out}}}{ must be at least 0.1% larger than }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}
{ plus 12 bytes. If }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ does not return }{\field{\*\fldinst {
HYPERLINK  \\l "Z_STREAM_END"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{, then it must be called again as described above. 

\par }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{() sets strm-> }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ to the }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{ checksum of all input read so far (that is, }{\field{\*\fldinst {HYPERLINK  \\l "total_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000074006f00740061006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 total_in}}}{ bytes). 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{() may update }{\field{\*\fldinst {HYPERLINK  \\l "data_type"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000064006100740061005f0074007900700065000000}}}{\fldrslt {\cs29\ul\cf2 data_type}}}{ if it can make a good guess about the input data type (}{\field{\*\fldinst {HYPERLINK  \\l "Z_ASCII"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000005a005f00410053004300490049000000}}}{\fldrslt {\cs29\ul\cf2 Z_ASCII}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "Z_BINARY"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00420049004e004100520059000000}}}{\fldrslt {\cs29\ul\cf2 Z_BINARY}}}{
). In doubt, the data is considered binary. This field is only for information purposes and does not affect the compression algorithm in any manner. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{() returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if some progress has been made (more input processed or more output produced), }{\field{\*\fldinst {HYPERLINK  \\
l "Z_STREAM_END"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{
 if all input has been consumed and all output has been produced (only when flush is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}
}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{), }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 
Z_STREAM_ERROR}}}{ if the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent (for example if }
{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ was NULL), }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if no progress is possible (for example }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ was zero). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateEnd (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {All dynamically allocated data structures for this stream are freed. This function discards any unprocessed input and does not flush any pending output. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateEnd"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000006400650066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 deflateEnd}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\
l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent, }{\field{\*\fldinst {HYPERLINK  \\l "Z_DATA_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{ if the stream was freed prematurely (some input or output was discarded). In the error case, }
{\field{\*\fldinst {HYPERLINK  \\l "msg"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ may be set but then points to a static string (which must not be deallocated). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateInit (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Initializes the internal stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {
\cs29\ul\cf2 state}}}{ for decompression. The fields }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{, }
{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ must be initialized before by the caller. If }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ is not }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ is large enough (the exact value depends on the compression method), }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{
 determines the compression method from the zlib header and allocates all data structures accordingly ; otherwise the allocation will be deferred to the first call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{. If }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ are set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{ updates them to use default allocation functions. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{ returns }{\field{\*\fldinst {HYPERLINK  
\\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_VERSION_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000100000005a005f00560045005200530049004f004e005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_VERSION_ERROR}}}{ if the zlib library version is incompatible with the version assumed by the caller. }
{\field{\*\fldinst {HYPERLINK  \\l "msg"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ is set to null if there is no error message. }{\field{\*\fldinst {HYPERLINK  \\l 
"inflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{
 does not perform any decompression apart from reading the zlib header if present: this will be done by }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000
}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{(). (So }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and }
{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ may be modified, but }{\field{\*\fldinst {HYPERLINK  \\
l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ are unchanged.) 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflate (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt 
{\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int flush);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{
 decompresses as much data as possible, and stops when the input buffer becomes empty or the output buffer becomes full. It may some introduce some output latency (reading input without producing any output) except when forced to flush. 
\par The detailed semantics are as follows. }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{
 performs one or both of the following actions: 
\par {\pntext\pard\plain\s16 \f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s16\fi-360\li1080\sb100\sa100\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright {Decompress more input starting at }
{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and update }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ accordingly. If not all input can be processed (because there is not enough room in the output buffer), }
{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{
 is updated and processing will resume at this point for the next call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
inflate}}}{(). 
\par {\pntext\pard\plain\s16 \f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Provide more output starting at }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}
}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and update }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and }
{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ accordingly. }{\field{\*\fldinst {HYPERLINK  \\
l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{
() provides as much output as possible, until there is no more input data or no more space in the output buffer (see below about the flush parameter). 
\par }\pard \s16\li360\sb100\sa100\widctlpar\adjustright {Before the call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
inflate}}}{(), the application should ensure that at least one of the actions is possible, by providing more input and/or consuming more output, and updating the next_* and avail_* values 
accordingly. The application can consume the uncompressed output when it wants, for example when the output buffer is full (}{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ == 0), or after each call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{(). If }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ and with zero }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{, it must be called again after making room in the output buffer because there might be more output pending. 
\par If the parameter flush is set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_SYNC_FLUSH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530059004e0043005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_SYNC_FLUSH}}}{, }
{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{
 flushes as much output as possible to the output buffer. The flushing behavior of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {
\cs29\ul\cf2 inflate}}}{ is not specified for values of the flush parameter other than }{\field{\*\fldinst {HYPERLINK  \\l "Z_SYNC_FLUSH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530059004e0043005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_SYNC_FLUSH}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{, but the current implementation actually flushes as much output as possible anyway. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{() should normally be called until it returns }{\field{\*\fldinst 
{HYPERLINK  \\l "Z_STREAM_END"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{
 or an error. However if all decompression is to be performed in a single step (a single call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}
}{\fldrslt {\cs29\ul\cf2 inflate}}}{), the parameter flush should be set to }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {
\cs29\ul\cf2 Z_FINISH}}}{. In this case all pending input is processed and all pending output is flushed ; }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ must be large enough to hold all 
the uncompressed data. (The size of the uncompressed data may have been saved by the compressor for this purpose.) The next operation on this stream must be }{\field{\*\fldinst {HYPERLINK  \\l "inflateEnd"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000069006e0066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 inflateEnd}}}{ to deallocate the decompression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{. The use of }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{ is never required, but can be used to inform }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{ that a faster routine may be used for the single }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{() call. 
\par If a preset dictionary is needed at this point (see }{\field{\*\fldinst {HYPERLINK  \\l "inflateSetDictionary"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001500000069006e0066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 inflateSetDictionary}}}{ below), }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{ sets strm-}{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ to the }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{ checksum of the dictionary chosen by the compressor and returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_NEED_DICT"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004e004500450044005f0044004900430054000000}}}{\fldrslt {\cs29\ul\cf2 Z_NEED_DICT}}}{ ; otherwise it sets strm-> }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ to the }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{ checksum of all output produced so far (that is, }{\field{\*\fldinst {HYPERLINK  \\l "total_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000074006f00740061006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 total_out}}}{ bytes) and returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_END"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{ or an error code as described below. At the end of the stream, }{\field{\*\fldinst {HYPERLINK  \\
l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{() checks that its computed }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{ checksum is equal to that saved by the compressor and returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_END"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{ only if the checksum is correct. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{() returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if some progress has been made (more input processed or more output produced), }{\field{\*\fldinst {HYPERLINK  \\
l "Z_STREAM_END"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530054005200450041004d005f0045004e0044000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_END}}}{ if the
 end of the compressed data has been reached and all uncompressed output has been produced, }{\field{\*\fldinst {HYPERLINK  \\l "Z_NEED_DICT"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004e004500450044005f0044004900430054000000}}}{\fldrslt {\cs29\ul\cf2 Z_NEED_DICT}}}{ if a preset dictionary is needed at this point, }{\field{\*\fldinst {HYPERLINK  \\l "Z_DATA_ERROR"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{ if the input
 data was corrupted (input stream not conforming to the zlib format or incorrect }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {
\cs29\ul\cf2 adler32}}}{ checksum), }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 
Z_STREAM_ERROR}}}{ if the stream structure was inconsistent (for example if }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 
next_in}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ was NULL), }{\field{\*\fldinst {HYPERLINK  
\\l "Z_MEM_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\
l "Z_BUF_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if no progress is possible 
or if there was not enough room in the output buffer when }{\field{\*\fldinst {HYPERLINK  \\l "Z_FINISH"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000005a005f00460049004e004900530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FINISH}}}{
 is used. In the }{\field{\*\fldinst {HYPERLINK  \\l "Z_DATA_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{
 case, the application may then call }{\field{\*\fldinst {HYPERLINK  \\l "inflateSync"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c00610074006500530079006e0063000000}}}{\fldrslt {\cs29\ul\cf2 inflateSync}}}{
 to look for a good compression block. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateEnd (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {All dynamically allocated data structures for this stream are freed. This function discards any unprocessed input and does not flush any pending output. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateEnd"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000069006e0066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 inflateEnd}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\
l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent. In the error case, }{\field{\*\fldinst {HYPERLINK  \\l "msg"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ may be set but then points to a static string (which must not be deallocated). 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz5\shplid1031
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8197\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Advanced functions 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {The following functions are needed only in some special applications. 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function list 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \fi-360\li720\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright \fs20\cgrid {int }{\field{\*\fldinst {HYPERLINK  \\
l "deflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm, 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateSetDictionary"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000150000006400650066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 deflateSetDictionary}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm, const Bytef *dictionary, uInt dictLength); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateCopy"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650043006f00700079000000}}
}{\fldrslt {\cs29\ul\cf2 deflateCopy}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ dest, }
{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ source); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateReset"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c00610074006500520065007300650074000000}}
}{\fldrslt {\cs29\ul\cf2 deflateReset}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 

\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "deflateParams"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000006400650066006c0061007400650050006100720061006d0073000000
}}}{\fldrslt {\cs29\ul\cf2 deflateParams}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{
 strm, int level, int strategy); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c0061007400650049006e006900740032000000}}
}{\fldrslt {\cs29\ul\cf2 inflateInit2}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{
 strm, int windowBits); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateSetDictionary"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001500000069006e0066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 inflateSetDictionary}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm, const Bytef *dictionary, uInt dictLength); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateSync"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c00610074006500530079006e0063000000}}
}{\fldrslt {\cs29\ul\cf2 inflateSync}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 

\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}int }{\field{\*\fldinst {HYPERLINK  \\l "inflateReset"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c00610074006500520065007300650074000000}}
}{\fldrslt {\cs29\ul\cf2 inflateReset}}}{ (}{\field{\*\fldinst {HYPERLINK  \\l "z_streamp"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{ strm); 

\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function description 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateInit2 (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int level, int method, int windowBits, int memLevel, int strategy);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {This is another version of }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ with more compression options. The fields }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ must be initialized before by the caller. 
\par The method parameter is the compression method. It must be }{\field{\*\fldinst {HYPERLINK  \\l "Z_DEFLATED"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000005a005f004400450046004c0041005400450044000000}}}{\fldrslt {\cs29\ul\cf2 
Z_DEFLATED}}}{ in this version of the library. 
\par The windowBits parameter is the base two logarithm of the window size (the size of the history buffer). It should be in the range 8..15 for this version of the library. Larger values of this parame
ter result in better compression at the expense of memory usage. The default value is 15 if }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{ is used instead. 
\par The memLevel parameter specifies how much memory should be allocated for the internal compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {
\cs29\ul\cf2 state}}}{. memLevel=1 uses minimum memory but is slow and reduces compression ratio ; memLevel=9 uses maximum memory for optimal speed. The default value is 8. See zconf.h for total memory usage as a function of windowBits and memLevel. 

\par The strategy parameter is used to tune the compression algorithm. Use the value }{\field{\*\fldinst {HYPERLINK  \\l "Z_DEFAULT_STRATEGY"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000130000005a005f00440045004600410055004c0054005f00530054005200410054004500470059000000}}}{\fldrslt {\cs29\ul\cf2 Z_DEFAULT_STRATEGY}}}{ for normal data, }{\field{\*\fldinst {HYPERLINK  \\l "Z_FILTERED"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000005a005f00460049004c00540045005200450044000000}}}{\fldrslt {\cs29\ul\cf2 Z_FILTERED}}}{ for data produced by a filter (or predictor), or }{\field{\*\fldinst {HYPERLINK  \\
l "Z_HUFFMAN_ONLY"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f0048005500460046004d0041004e005f004f004e004c0059000000}}}{\fldrslt {\cs29\ul\cf2 Z_HUFFMAN_ONLY}}}{
 to force Huffman encoding only (no string match). Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to }{\field{\*\fldinst {HYPERLINK  \\l "compress"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000063006f006d00700072006500730073000000}}}{\fldrslt {\cs29\ul\cf2 compress}}}{ them better. The effect of }{\field{\*\fldinst {HYPERLINK  \\l "Z_FILTERED"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000005a005f00460049004c00540045005200450044000000}}}{\fldrslt {\cs29\ul\cf2 Z_FILTERED}}}{ is to force more Huffman coding and less string matching ; it is somewhat intermediate between Z_DEFAULT and }
{\field{\*\fldinst {HYPERLINK  \\l "Z_HUFFMAN_ONLY"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f0048005500460046004d0041004e005f004f004e004c0059000000}}}{\fldrslt {\cs29\ul\cf2 Z_HUFFMAN_ONLY}}}{
. The strategy parameter only affects the compression ratio but not the correctness of the compressed output even if it is not set appropriately. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ returns }{\field{\*\fldinst {
HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if a parameter is invalid (such as an invalid method). }{\field{\*\fldinst {HYPERLINK  \\
l "msg"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ is set to null if there is no error message. }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ does not perform any compression: this will be done by }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}
{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateSetDictionary (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000
}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, const Bytef *dictionary, uInt dictLength);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Initializes the compression dictionary from the given byte sequence without producing any compressed output. This function must be called immediately after }{\field{\*\fldinst {HYPERLINK  \\
l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "deflateReset"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c00610074006500520065007300650074000000}}}{\fldrslt {\cs29\ul\cf2 deflateReset}}}{, before any call of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{. The compressor and decompressor must use exactly the same dictionary (see }{\field{\*\fldinst {HYPERLINK  \\
l "inflateSetDictionary"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000001500000069006e0066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 inflateSetDictionary}}}{). 
\par The dictionary should consist of strings (byte sequences) that are likely to be encountered later in the data to be compres
sed, with the most commonly used strings preferably put towards the end of the dictionary. Using a dictionary is most useful when the data to be compressed is short and can be predicted with good accuracy ; the data can then be compressed better than with
 the default empty dictionary. 
\par Depending on the size of the compression data structures selected by }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {
\cs29\ul\cf2 deflateInit}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{
, a part of the dictionary may in effect be discarded, for example if the dictionary is larger than the window size in }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ or deflate2. Thus the strings most likely to be useful should be put at the end of the dictionary, not at the front. 
\par Upon return of this function, strm-> }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{
 is set to the Adler32 value of the dictionary ; the decompressor may later use this value to determine which dictionary has been used by the compressor. (The Adler32 value applies to the whole dictionary ev
en if only a subset of the dictionary is actually used by the compressor.) 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateSetDictionary"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000150000006400650066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 
deflateSetDictionary}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, or }{\field{\*\fldinst {HYPERLINK  \\
l "Z_STREAM_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{
 if a parameter is invalid (such as NULL dictionary) or the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{
 is inconsistent (for example if }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{
 has already been called for this stream or if the compression method is bsort). }{\field{\*\fldinst {HYPERLINK  \\l "deflateSetDictionary"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000150000006400650066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 deflateSetDictionary}}}{ does not perform any compression: this will be done by }
{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateCopy (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  dest, }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 
z_streamp}}}{\cf2  source);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Sets the destination stream as a complete copy of the source stream. 
\par This function can be useful when several compression strategies will be tried, for example when there are several ways of pre-processing the input data with a filter. The streams that will be discarded should then be freed by calling }{\field{\*\fldinst {
HYPERLINK  \\l "deflateEnd"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000006400650066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 deflateEnd}}}{. Note that }{\field{\*\fldinst {HYPERLINK  \\l "deflateCopy"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650043006f00700079000000}}}{\fldrslt {\cs29\ul\cf2 deflateCopy}}}{ duplicates the internal compression }{\field{\*\fldinst {HYPERLINK  \\l "state"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ which can be quite large, so this strategy is slow and can consume lots of memory. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateCopy"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650043006f00700079000000}}}{\fldrslt {\cs29\ul\cf2 deflateCopy}}}{ returns }{\field{\*\fldinst {HYPERLINK  
\\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the source stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent (such as }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ being NULL). }{\field{\*\fldinst {HYPERLINK  \\l "msg"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ is left unchanged in both source and destination. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateReset (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {This function is equivalent to }{\field{\*\fldinst {HYPERLINK  \\l "deflateEnd"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000006400650066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 deflateEnd}}}{ followed by }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit}}}{, but does not free and reallocate all the internal compression }{\field{\*\fldinst {HYPERLINK  \\l "state"
}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{. The stream will keep the same compression level and any other attributes that may have been set by }{\field{\*\fldinst 
{HYPERLINK  \\l "deflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateReset"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c00610074006500520065007300650074000000}}}{\fldrslt {\cs29\ul\cf2 deflateReset}}}{ returns }{\field{\*\fldinst {
HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the source stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent (such as }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ being NULL). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int deflateParams (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int level, int strategy);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Dynamically update the compression level and compression strategy. The interpretation of level and strategy is as in }{\field{\*\fldinst {HYPERLINK  \\l "deflateInit2"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2}}}{. This can be used to swit
ch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy. If the compression level is changed, the input available so far is compressed with the old level (and may be flushed
); the new level will take effect only at the next call of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{(). 

\par Before the call of }{\field{\*\fldinst {HYPERLINK  \\l "deflateParams"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000006400650066006c0061007400650050006100720061006d0073000000}}}{\fldrslt {\cs29\ul\cf2 deflateParams}}}{
, the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ must be set as for a call of }{\field{\*\fldinst {HYPERLINK  \\
l "deflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{
(), since the currently available input may have to be compressed and flushed. In particular, strm-> }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ must be non-zero. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "deflateParams"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000006400650066006c0061007400650050006100720061006d0073000000}}}{\fldrslt {\cs29\ul\cf2 deflateParams}}}{ returns }{\field{\*\fldinst {
HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the source stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent or if a parameter was invalid, }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if strm->avail_out was zero. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateInit2 (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, int windowBits);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {This is another version of }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{ with an extra parameter. The fields }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ must be initialized before by the caller. 
\par The windowBits parameter is the base two logarithm of the maximum window size (the size of the history buffer). It should be in the range 8..15 for this version of the library. The default value is 15 if }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{ is used instead. If a compressed stream with a larger window size is given as input, }
{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{() will return with the error code }{\field{\*\fldinst {HYPERLINK  
\\l "Z_DATA_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{ instead of trying to allocate a larger window. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit2"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit2}}}{ returns }{\field{\*\fldinst {
HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\l "Z_MEM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004d0045004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_MEM_ERROR}}}{ if there was not enough memory, }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if a parameter is invalid (such as a negative memLevel). }{\field{\*\fldinst {HYPERLINK  \\
l "msg"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000040000006d00730067000000}}}{\fldrslt {\cs29\ul\cf2 msg}}}{ is set to null if there is no error message. }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit2"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit2}}}{ does not perform any decom
pression apart from reading the zlib header if present: this will be done by }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 
inflate}}}{(). (So }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\
l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ may be modified, but }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ are unchanged.) 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateSetDictionary (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000
}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm, const Bytef *dictionary, uInt dictLength);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Initializes the decompression dictionary from the given uncompressed byte sequence. This function must be called immediately after a call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{ if this call returned }{\field{\*\fldinst {HYPERLINK  \\l "Z_NEED_DICT"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004e004500450044005f0044004900430054000000}}}{\fldrslt {\cs29\ul\cf2 Z_NEED_DICT}}}{
. The dictionary chosen by the compressor can be determined from the Adler32 value returned by this call of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 inflate}}}{. The compressor and decompressor must use exactly the same dictionary (see }{\field{\*\fldinst {HYPERLINK  \\l "deflateSetD
ictionary"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000150000006400650066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 deflateSetDictionary}}}{). 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateSetDictionary"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000001500000069006e0066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 
inflateSetDictionary}}}{ returns }{\field{\*\fldinst {HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, }{\field{\*\fldinst {HYPERLINK  \\
l "Z_STREAM_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if a parameter is invalid (
such as NULL dictionary) or the stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ is inconsistent, }{\field{\*\fldinst {
HYPERLINK  \\l "Z_DATA_ERROR"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{
 if the given dictionary doesn't match the expected one (incorrect Adler32 value). }{\field{\*\fldinst {HYPERLINK  \\l "inflateSetDictionary"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000001500000069006e0066006c00610074006500530065007400440069006300740069006f006e006100720079000000}}}{\fldrslt {\cs29\ul\cf2 inflateSetDictionary}}}{
 does not perform any decompression: this will be done by subsequent calls of }{\field{\*\fldinst {HYPERLINK  \\l "inflate"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000800000069006e0066006c006100740065000000}}}{\fldrslt {
\cs29\ul\cf2 inflate}}}{(). 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateSync (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Skips invalid compressed data until a full flush point (see above the description of }{\field{\*\fldinst {HYPERLINK  \\l "deflate"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{ with }{\field{\*\fldinst {HYPERLINK  \\l "Z_FULL_FLUSH"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00460055004c004c005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_FULL_FLUSH}}}{) can be found, or until all available input is skipped. No output is provided. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateSync"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c00610074006500530079006e0063000000}}}{\fldrslt {\cs29\ul\cf2 inflateSync}}}{ returns }{\field{\*\fldinst {HYPERLINK  
\\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if a full flush point has been found, }{\field{\*\fldinst {HYPERLINK  \\l "Z_BUF_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000005a005f004200550046005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_BUF_ERROR}}}{ if no more input was provided, }{\field{\*\fldinst {HYPERLINK  \\l "Z_DATA_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f0044004100540041005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_DATA_ERROR}}}{ if no flush point has been found, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{
 if the stream structure was inconsistent. In the success case, the application may save the current current value of }{\field{\*\fldinst {HYPERLINK  \\l "total_in"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000074006f00740061006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 total_in}}}{ which indicates where valid compressed data was found. In the error case, the application may repeatedly call }
{\field{\*\fldinst {HYPERLINK  \\l "inflateSync"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c00610074006500530079006e0063000000}}}{\fldrslt {\cs29\ul\cf2 inflateSync}}}{
, providing more input each time, until success or end of the input data. 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 int inflateReset (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}
}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  strm);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {This function is equivalent to }{\field{\*\fldinst {HYPERLINK  \\l "inflateEnd"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b00000069006e0066006c0061007400650045006e0064000000}}}{\fldrslt {\cs29\ul\cf2 inflateEnd}}}{ followed by }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{, but does not free and reallocate all the internal decompression }{\field{\*\fldinst {HYPERLINK  \\
l "state"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{. The stream will keep attributes that may have been set by }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit2"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit2}}}{. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "inflateReset"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d00000069006e0066006c00610074006500520065007300650074000000}}}{\fldrslt {\cs29\ul\cf2 inflateReset}}}{ returns }{\field{\*\fldinst {
HYPERLINK  \\l "Z_OK"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000050000005a005f004f004b000000}}}{\fldrslt {\cs29\ul\cf2 Z_OK}}}{ if success, or }{\field{\*\fldinst {HYPERLINK  \\l "Z_STREAM_ERROR"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000f0000005a005f00530054005200450041004d005f004500520052004f0052000000}}}{\fldrslt {\cs29\ul\cf2 Z_STREAM_ERROR}}}{ if the source stream }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ was inconsistent (such as }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ or }{\field{\*\fldinst {HYPERLINK  \\l "state"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{ being NULL). 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz6\shplid1032
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8198\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Checksum functions 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {These functions are not related to compression but are exported anyway because they might be useful in applications using the compression library. 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function list 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \fi-360\li720\widctlpar{\*\pn \pnlvlblt\ilvl0\ls3\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls3\adjustright \fs20\cgrid {uLong }{\field{\*\fldinst {HYPERLINK  \\
l "adler32"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{ (uLong }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{, const Bytef *buf, uInt len); 
\par {\pntext\pard\plain\f3\fs20\cgrid \loch\af3\dbch\af0\hich\f3 \'b7\tab}uLong }{\field{\*\fldinst {HYPERLINK  \\l "crc32"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000630072006300330032000000}}}{\fldrslt {\cs29\ul\cf2 crc32}}}{
 (uLong crc, const Bytef *buf, uInt len); 
\par }\pard\plain \s20\sb100\sa100\keepn\widctlpar\outlinelevel3\adjustright \b\fs28 {Function description 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 uLong adler32 (uLong }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "adler"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {
\cs29\ul\cf2 adler}}}{\cf2 , const Bytef *buf, uInt len);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Update a running Adler-32 checksum with the bytes buf[0..len-1] and return the updated checksum. If buf is NULL, this function returns the required initial value for the checksum. 
\par An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much faster. Usage example: 
\par }\pard\plain \s32\li360\widctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20 {
\par      uLong }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ = }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{(0L, }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{, 0);
\par 
\par      while (read_buffer(buffer, length) != EOF) \{
\par        }{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ = }{\field{\*\fldinst {HYPERLINK  \\l "adler32"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{(}{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{, buffer, length);
\par      \}
\par      if (}{\field{\*\fldinst {HYPERLINK  \\l "adler"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000610064006c00650072000000}}}{\fldrslt {\cs29\ul\cf2 adler}}}{ != original_adler) error();
\par    
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 uLong crc32 (uLong crc, const Bytef *buf, uInt len);}{ 
\par }\pard\plain \s16\li360\sb100\sa100\widctlpar\adjustright {Update a running crc with the bytes buf[0..len-1] and return the updated crc. If buf is NULL, this function returns the required initial va
lue for the crc. Pre- and post-conditioning (one's complement) is performed within this function so it shouldn't be done by the application. Usage example: 
\par }\pard\plain \s32\li360\widctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20 {
\par      uLong crc = }{\field{\*\fldinst {HYPERLINK  \\l "crc32"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000630072006300330032000000}}}{\fldrslt {\cs29\ul\cf2 crc32}}}{(0L, }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{, 0);
\par 
\par      while (read_buffer(buffer, length) != EOF) \{
\par        crc = }{\field{\*\fldinst {HYPERLINK  \\l "crc32"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000630072006300330032000000}}}{\fldrslt {\cs29\ul\cf2 crc32}}}{(crc, buffer, length);
\par      \}
\par      if (crc != original_crc) error();
\par    
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz7\shplid1033
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8199\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {struct z_stream_s 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\cf2 
\par }\pard\plain \s32\widctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20 {\cf2 typedef struct z_stream_s \{
\par     Bytef    *next_in;  /* next input byte */
\par     uInt     avail_in;  /* number of bytes available at }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "next_in"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 next_in}}}{
\cf2  */
\par     uLong    total_in;  /* total nb of input bytes read so far */
\par 
\par     Bytef    *next_out; /* next output byte should be put there */
\par     uInt     avail_out; /* remaining free space at }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "next_out"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}
{\cf2  */
\par     uLong    total_out; /* total nb of bytes output so far */
\par 
\par     char     *msg;      /* last error message, NULL if no error */
\par     struct internal_state FAR *state; /* not visible by applications */
\par 
\par     alloc_func zalloc;  /* used to allocate the internal }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "state"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{\cf2  */

\par     free_func  zfree;   /* used to free the internal }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "state"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000006000000730074006100740065000000}}}{\fldrslt {\cs29\ul\cf2 state}}}{\cf2  */
\par     voidpf     opaque;  /* private data object passed to }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "zalloc"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{\cf2 
 and }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "zfree"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{\cf2  */
\par 
\par     int     data_type;  /* best guess about the data type: ascii or binary */
\par     uLong   adler;      /* }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "adler32"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000008000000610064006c0065007200330032000000}}}{\fldrslt {\cs29\ul\cf2 adler32}}}{\cf2 
 value of the uncompressed data */
\par     uLong   reserved;   /* }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "reserved"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b020000000800000009000000720065007300650072007600650064000000}}}{\fldrslt {\cs29\ul\cf2 reserved}}}{\cf2  for future use */

\par \} }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_stream_s"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000007a005f00730074007200650061006d005f0073000000}}}{\fldrslt {\cs29\ul\cf2 z_stream}}}{\cf2  ;
\par 
\par typedef }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_stream_s"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000007a005f00730074007200650061006d005f0073000000}}}{\fldrslt {\cs29\ul\cf2 z_stream}}}{\cf2  FAR * z_streamp;  \'ff 

\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {The application must update }{\field{\*\fldinst {HYPERLINK  \\l "next_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006e006500780074005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 
next_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ when }{\field{\*\fldinst {HYPERLINK  \\
l "avail_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000061007600610069006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 avail_in}}}{ has dropped to zero. It must update }{\field{\*\fldinst {HYPERLINK  \\l "next_out"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000090000006e006500780074005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 next_out}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ when }{\field{\*\fldinst {HYPERLINK  \\l "avail_out"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000061007600610069006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 avail_out}}}{ has dropped to zero. The application must initialize }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{, }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ before calling the init function. All other fields are set by the compression library and must not be updated by the application. 

\par The }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{ value provided by the app
lication will be passed as the first parameter for calls of }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ and }
{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{
. This can be useful for custom memory management. The compression library attaches no meaning to the }{\field{\*\fldinst {HYPERLINK  \\l "opaque"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}
}{\fldrslt {\cs29\ul\cf2 opaque}}}{ value. 
\par }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ must return }{\field{\*\fldinst {HYPERLINK  \\l "Z_NULL"}{
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000005a005f004e0055004c004c000000}}}{\fldrslt {\cs29\ul\cf2 Z_NULL}}}{ if there is not enough memory for the object. If zlib is used in a multi-threaded application, }{\field{\*\fldinst {
HYPERLINK  \\l "zalloc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "zfree"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ must be thread safe. 
\par On 16-bit systems, the functions }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ and }{\field{\*\fldinst {HYPERLINK  \\
l "zfree"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{ must be able to allocate exactly 65536 bytes, but will not be 
required to allocate more than this if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS, pointers returned by }{\field{\*\fldinst {HYPERLINK  \\l "zalloc"}{{\*\datafield 
08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{ for objects of exactly 65536 bytes *must* have their offset normalized to zero. The defa
ult allocation function provided by this library ensures this (see zutil.c). To reduce memory requirements and avoid any allocation of 64K objects, at the expense of compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h). 
\par The fields }{\field{\*\fldinst {HYPERLINK  \\l "total_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000074006f00740061006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 total_in}}}{ and }{\field{\*\fldinst {HYPERLINK  \\
l "total_out"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000074006f00740061006c005f006f00750074000000}}}{\fldrslt {\cs29\ul\cf2 total_out}}}{ can be used for statistics or progress reports. After compression, }{\field{\*\fldinst 
{HYPERLINK  \\l "total_in"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000900000074006f00740061006c005f0069006e000000}}}{\fldrslt {\cs29\ul\cf2 total_in}}}{ holds the total size of the uncompressed data and ma
y be saved for use in the decompressor (particularly if the decompressor wants to decompress everything in a single step). 
\par }{\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz8\shplid1034{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8200
\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Constants 
\par }\pard\plain \s32\widctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20 {\cf2 #define Z_NO_FLUSH      0
\par #define Z_PARTIAL_FLUSH 1 
\par \tab /* will be removed, use }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "Z_SYNC_FLUSH"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000005a005f00530059004e0043005f0046004c005500530048000000}}}{\fldrslt {\cs29\ul\cf2 Z_SYNC_FLUSH}
}}{\cf2  instead */
\par #define Z_SYNC_FLUSH    2
\par #define Z_FULL_FLUSH    3
\par #define Z_FINISH        4
\par /* Allowed flush values ; see }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "deflate"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{\cf2 
() below for details */
\par 
\par #define Z_OK            0
\par #define Z_STREAM_END    1
\par #define Z_NEED_DICT     2
\par #define Z_ERRNO        (-1)
\par #define Z_STREAM_ERROR (-2)
\par #define Z_DATA_ERROR   (-3)
\par #define Z_MEM_ERROR    (-4)
\par #define Z_BUF_ERROR    (-5)
\par #define Z_VERSION_ERROR (-6)
\par /* Return codes for the compression/decompression functions. Negative
\par  * values are errors, positive values are used for special but normal events.
\par  */
\par 
\par #define Z_NO_COMPRESSION         0
\par #define Z_BEST_SPEED             1
\par #define Z_BEST_COMPRESSION       9
\par #define Z_DEFAULT_COMPRESSION  (-1)
\par /* compression levels */
\par 
\par #define Z_FILTERED            1
\par #define Z_HUFFMAN_ONLY        2
\par #define Z_DEFAULT_STRATEGY    0
\par /* compression strategy ; see }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "deflateInit2"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000d0000006400650066006c0061007400650049006e006900740032000000}}}{\fldrslt {\cs29\ul\cf2 deflateInit2
}}}{\cf2 () below for details */
\par 
\par #define Z_BINARY   0
\par #define Z_ASCII    1
\par #define Z_UNKNOWN  2
\par /* Possible values of the }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "data_type"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a00000064006100740061005f0074007900700065000000}}}{\fldrslt {\cs29\ul\cf2 data_type}}}{\cf2  field */

\par 
\par #define Z_DEFLATED   8
\par /* The }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "deflate"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000080000006400650066006c006100740065000000}}}{\fldrslt {\cs29\ul\cf2 deflate}}}{\cf2 
 compression method (the only one supported in this version) */
\par 
\par #define Z_NULL  0  /* for initializing }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "zalloc"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000007a0061006c006c006f0063000000}}}{\fldrslt {\cs29\ul\cf2 zalloc}}}{\cf2 , }
{\field{\*\fldinst {\cf2 HYPERLINK  \\l "zfree"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000060000007a0066007200650065000000}}}{\fldrslt {\cs29\ul\cf2 zfree}}}{\cf2 , }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "opaque"}{\cf2 
{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b0200000008000000070000006f00700061007100750065000000}}}{\fldrslt {\cs29\ul\cf2 opaque}}}{\cf2  */
\par 
\par #define zlib_version }{\field{\*\fldinst {\cf2 HYPERLINK  \\l "zlibVersion"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000007a006c0069006200560065007200730069006f006e000000}}}{\fldrslt {\cs29\ul\cf2 zlibVersion}}}{\cf2 ()

\par /* for compatibility with versions less than 1.0.2 */
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz9\shplid1035
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8201\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par 
\par }\pard\plain \s19\sb100\sa100\keepn\widctlpar\outlinelevel2\adjustright \b\fs36 {Misc 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\field{\*\fldinst {HYPERLINK  \\l "deflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c0000006400650066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 
deflateInit}}}{ and }{\field{\*\fldinst {HYPERLINK  \\l "inflateInit"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000c00000069006e0066006c0061007400650049006e00690074000000}}}{\fldrslt {\cs29\ul\cf2 inflateInit}}}{
 are macros to allow checking the zlib version and the compiler's view of }{\field{\*\fldinst {HYPERLINK  \\l "z_stream_s"}{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000b0000007a005f00730074007200650061006d005f0073000000}}}{\fldrslt {
\cs29\ul\cf2 z_stream}}}{. 
\par Other functions: }{\cf2 
\par }\pard\plain \s15\sb100\sa100\widctlpar\adjustright {\cf2 const char * zError (int err);}{ }{\cf2 
\par int inflateSyncPoint (}{\field{\*\fldinst {\cf2 HYPERLINK  \\l "z_streamp"}{\cf2 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000a0000007a005f00730074007200650061006d0070000000}}}{\fldrslt {\cs29\ul\cf2 z_streamp}}}{\cf2  z);}{ }{\cf2 

\par const uLongf * get_crc_table (void);}{ 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\lang1024 {\shp{\*\shpinst\shpleft0\shptop240\shpright9360\shpbottom241\shpfhdr0\shpbxcolumn\shpbypara\shpwr3\shpwrk0\shpfblwtxt0\shpz10\shplid1036
{\sp{\sn shapeType}{\sv 20}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lineColor}{\sv 13948116}}{\sp{\sn lineWidth}{\sv 22225}}{\sp{\sn shadowOffsetX}{\sv 0}}{\sp{\sn shadowOffsetY}{\sv -12700}}
{\sp{\sn shadowOriginY}{\sv 32385}}{\sp{\sn fShadow}{\sv 1}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8202\dpline\dpptx0\dppty0\dpptx9360\dppty1\dpx0\dpy240\dpxsize9360\dpysize1\dplinew35\dplinecor212\dplinecog212\dplinecob212}}}}{
\par Last update: Wed Oct 13 20:42:34 1999\line piaip@csie.ntu.edu.tw 
\par }{
\par }}